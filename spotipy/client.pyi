from typing import Any, Optional

from json_types import *
from spotipy.exceptions import SpotifyException as SpotifyException

T = TypeVar("T")


class Spotify:
    max_retries: int = ...
    default_retry_codes: Any = ...
    country_codes: Any = ...
    prefix: str = ...
    client_credentials_manager: Any = ...
    oauth_manager: Any = ...
    proxies: Any = ...
    requests_timeout: Any = ...
    status_forcelist: Any = ...
    backoff_factor: Any = ...
    retries: Any = ...
    status_retries: Any = ...
    language: Any = ...
    def __init__(self, auth: Optional[Any] = ..., requests_session: bool = ..., client_credentials_manager: Optional[Any] = ..., oauth_manager: Optional[Any] = ..., auth_manager: Optional[Any] = ..., proxies: Optional[Any]
                 = ..., requests_timeout: int = ..., status_forcelist: Optional[Any] = ..., retries: Any = ..., status_retries: Any = ..., backoff_factor: float = ..., language: Optional[Any] = ...) -> None: ...

    def set_auth(self, auth: Any) -> None: ...
    @property
    def auth_manager(self): ...
    @auth_manager.setter
    def auth_manager(self, auth_manager: Any) -> None: ...
    def __del__(self) -> None: ...
    def next(self, result: Page[T]) -> Optional[Page[T]]: ...
    def previous(self, result: Any): ...
    def track(self, track_id: Any, market: Optional[Any] = ...): ...
    def tracks(self, tracks: Any, market: Optional[Any] = ...): ...
    def artist(self, artist_id: Any): ...
    def artists(self, artists: Any): ...
    def artist_albums(self, artist_id: Any, album_type: Optional[Any] = ...,
                      country: Optional[Any] = ..., limit: int = ..., offset: int = ...): ...

    def artist_top_tracks(self, artist_id: Any, country: str = ...): ...
    def artist_related_artists(self, artist_id: Any): ...
    def album(self, album_id: str) -> Album: ...
    def album_tracks(self, album_id: Any, limit: int = ...,
                     offset: int = ..., market: Optional[Any] = ...): ...

    def albums(self, albums: Any): ...
    def show(self, show_id: Any, market: Optional[Any] = ...): ...
    def shows(self, shows: Any, market: Optional[Any] = ...): ...
    def show_episodes(self, show_id: Any, limit: int = ...,
                      offset: int = ..., market: Optional[Any] = ...): ...

    def episode(self, episode_id: Any, market: Optional[Any] = ...): ...
    def episodes(self, episodes: Any, market: Optional[Any] = ...): ...

    def search(self, q: Any, limit: int = ..., offset: int = ...,
               type: str = ..., market: Optional[Any] = ...): ...
    def search_markets(self, q: Any, limit: int = ..., offset: int = ...,
                       type: str = ..., markets: Optional[Any] = ..., total: Optional[Any] = ...): ...

    def user(self, user: Any): ...
    def current_user_playlists(self, limit: int = ..., offset: int = ...): ...

    def playlist(self, playlist_id: Any,
                 fields: Optional[Any] = ..., market: Optional[Any] = ..., additional_types: Any = ...): ...

    def playlist_tracks(self, playlist_id: Any, fields: Optional[Any] = ..., limit: int = ...,
                        offset: int = ..., market: Optional[Any] = ..., additional_types: Any = ...): ...
    def playlist_items(self, playlist_id: Any, fields: Optional[Any] = ..., limit: int = ...,
                       offset: int = ..., market: Optional[Any] = ..., additional_types: Any = ...): ...

    def playlist_cover_image(self, playlist_id: Any): ...
    def playlist_upload_cover_image(self, playlist_id: Any, image_b64: Any): ...

    def user_playlist(self, user: Any, playlist_id: Optional[Any] = ...,
                      fields: Optional[Any] = ..., market: Optional[Any] = ...): ...
    def user_playlist_tracks(self, user: Optional[Any] = ..., playlist_id: Optional[Any] = ...,
                             fields: Optional[Any] = ..., limit: int = ..., offset: int = ..., market: Optional[Any] = ...): ...

    def user_playlists(self, user: Any, limit: int = ..., offset: int = ...): ...

    def user_playlist_create(self, user: Any, name: Any, public: bool = ...,
                             collaborative: bool = ..., description: str = ...): ...
    def user_playlist_change_details(self, user: Any, playlist_id: Any, name: Optional[Any] = ..., public: Optional[
                                     Any] = ..., collaborative: Optional[Any] = ..., description: Optional[Any] = ...): ...

    def user_playlist_unfollow(self, user: Any, playlist_id: Any): ...
    def user_playlist_add_tracks(self, user: Any, playlist_id: Any,
                                 tracks: Any, position: Optional[Any] = ...): ...

    def user_playlist_replace_tracks(self, user: Any, playlist_id: Any, tracks: Any): ...

    def user_playlist_reorder_tracks(self, user: Any, playlist_id: Any, range_start: Any,
                                     insert_before: Any, range_length: int = ..., snapshot_id: Optional[Any] = ...): ...

    def user_playlist_remove_all_occurrences_of_tracks(
        self, user: Any, playlist_id: Any, tracks: Any, snapshot_id: Optional[Any] = ...): ...
    def user_playlist_remove_specific_occurrences_of_tracks(
        self, user: Any, playlist_id: Any, tracks: Any, snapshot_id: Optional[Any] = ...): ...

    def user_playlist_follow_playlist(self, playlist_owner_id: Any, playlist_id: Any): ...

    def user_playlist_is_following(self, playlist_owner_id: Any,
                                   playlist_id: Any, user_ids: Any): ...
    def playlist_change_details(self, playlist_id: Any, name: Optional[Any] = ..., public: Optional[Any]
                                = ..., collaborative: Optional[Any] = ..., description: Optional[Any] = ...): ...

    def current_user_unfollow_playlist(self, playlist_id: Any): ...
    def playlist_add_items(self, playlist_id: Any, items: Any, position: Optional[Any] = ...): ...
    def playlist_replace_items(self, playlist_id: Any, items: Any): ...

    def playlist_reorder_items(self, playlist_id: Any, range_start: Any, insert_before: Any,
                               range_length: int = ..., snapshot_id: Optional[Any] = ...): ...

    def playlist_remove_all_occurrences_of_items(
        self, playlist_id: Any, items: Any, snapshot_id: Optional[Any] = ...): ...
    def playlist_remove_specific_occurrences_of_items(
        self, playlist_id: Any, items: Any, snapshot_id: Optional[Any] = ...): ...

    def current_user_follow_playlist(self, playlist_id: Any): ...
    def playlist_is_following(self, playlist_id: Any, user_ids: Any): ...
    def me(self): ...
    def current_user(self): ...
    def current_user_playing_track(self): ...
    def current_user_saved_albums(self, limit: int = ...,
                                  offset: int = ..., market: Optional[Any] = ...): ...

    def current_user_saved_albums_add(self, albums: Any = ...): ...
    def current_user_saved_albums_delete(self, albums: Any = ...): ...
    def current_user_saved_albums_contains(self, albums: Any = ...): ...
    def current_user_saved_tracks(self, limit: int = ...,
                                  offset: int = ..., market: Optional[Any] = ...): ...

    def current_user_saved_tracks_add(self, tracks: Optional[Any] = ...): ...
    def current_user_saved_tracks_delete(self, tracks: Optional[Any] = ...): ...
    def current_user_saved_tracks_contains(self, tracks: Optional[Any] = ...): ...
    def current_user_saved_episodes(
        self, limit: int = ..., offset: int = ..., market: Optional[Any] = ...): ...

    def current_user_saved_episodes_add(self, episodes: Optional[Any] = ...): ...
    def current_user_saved_episodes_delete(self, episodes: Optional[Any] = ...): ...
    def current_user_saved_episodes_contains(self, episodes: Optional[Any] = ...): ...
    def current_user_saved_shows(self, limit: int = ...,
                                 offset: int = ..., market: Optional[Any] = ...): ...

    def current_user_saved_shows_add(self, shows: Any = ...): ...
    def current_user_saved_shows_delete(self, shows: Any = ...): ...
    def current_user_saved_shows_contains(self, shows: Any = ...): ...
    def current_user_followed_artists(self, limit: int = ..., after: Optional[Any] = ...): ...
    def current_user_following_artists(self, ids: Optional[Any] = ...): ...
    def current_user_following_users(self, ids: Optional[Any] = ...): ...

    def current_user_top_artists(self, limit: int = ...,
                                 offset: int = ..., time_range: str = ...): ...

    def current_user_top_tracks(self, limit: int = ...,
                                offset: int = ..., time_range: str = ...): ...
    def current_user_recently_played(
        self, limit: int = ..., after: Optional[Any] = ..., before: Optional[Any] = ...): ...

    def user_follow_artists(self, ids: Any = ...): ...
    def user_follow_users(self, ids: Any = ...): ...
    def user_unfollow_artists(self, ids: Any = ...): ...
    def user_unfollow_users(self, ids: Any = ...): ...
    def featured_playlists(self, locale: Optional[Any] = ..., country: Optional[Any]
                           = ..., timestamp: Optional[Any] = ..., limit: int = ..., offset: int = ...): ...

    def new_releases(self, country: Optional[Any] = ..., limit: int = ..., offset: int = ...): ...

    def category(self, category_id: Any,
                 country: Optional[Any] = ..., locale: Optional[Any] = ...): ...

    def categories(self, country: Optional[Any] = ..., locale: Optional[Any]
                   = ..., limit: int = ..., offset: int = ...): ...

    def category_playlists(
        self, category_id: Optional[Any] = ..., country: Optional[Any] = ..., limit: int = ..., offset: int = ...): ...
    def recommendations(self, seed_artists: Optional[Any] = ..., seed_genres: Optional[Any] = ...,
                        seed_tracks: Optional[Any] = ..., limit: int = ..., country: Optional[Any] = ..., **kwargs: Any): ...

    def recommendation_genre_seeds(self): ...
    def audio_analysis(self, track_id: Any): ...
    def audio_features(self, tracks: Any = ...): ...
    def devices(self): ...

    def current_playback(self, market: Optional[Any]
                         = ..., additional_types: Optional[Any] = ...): ...
    def currently_playing(self, market: Optional[Any]
                          = ..., additional_types: Optional[Any] = ...): ...

    def transfer_playback(self, device_id: Any, force_play: bool = ...): ...
    def start_playback(self, device_id: Optional[Any] = ..., context_uri: Optional[Any] = ...,
                       uris: Optional[Any] = ..., offset: Optional[Any] = ..., position_ms: Optional[Any] = ...): ...

    def pause_playback(self, device_id: Optional[Any] = ...): ...
    def next_track(self, device_id: Optional[Any] = ...): ...
    def previous_track(self, device_id: Optional[Any] = ...): ...
    def seek_track(self, position_ms: Any, device_id: Optional[Any] = ...): ...
    def repeat(self, state: Any, device_id: Optional[Any] = ...) -> None: ...
    def volume(self, volume_percent: Any, device_id: Optional[Any] = ...) -> None: ...
    def shuffle(self, state: Any, device_id: Optional[Any] = ...) -> None: ...
    def add_to_queue(self, uri: Any, device_id: Optional[Any] = ...): ...
    def available_markets(self): ...
