### AUTOGENERATED: DO NOT MODIFY ###
import sys
from typing import Any, Generic, List, Mapping, TypeVar, overload

if sys.version_info >= (3, 8):
    from typing import Literal, TypedDict
else:
    from typing_extensions import Literal, TypedDict

_T = TypeVar("_T", covariant=True)


class Page(Generic[_T], Mapping[str, Any]):
    # autopep8: off
    @overload
    def __getitem__(self, k: Literal["href"]) -> str: ...
    @overload
    def __getitem__(self, k: Literal["items"]) -> List[_T]: ...
    @overload
    def __getitem__(self, k: Literal["limit"]) -> int: ...
    @overload
    def __getitem__(self, k: Literal["next"]) -> str: ...
    @overload
    def __getitem__(self, k: Literal["offset"]) -> int: ...
    @overload
    def __getitem__(self, k: Literal["previous"]) -> str: ...
    @overload
    def __getitem__(self, k: Literal["total"]) -> int: ...

    def __getitem__(self, k: str) -> Any: ...
    # autopep8: on


class CursorPage(Generic[_T], Mapping[str, Any]):
    # autopep8: off
    @overload
    def __getitem__(self, k: Literal["cursors"]) -> "Cursor": ...
    @overload
    def __getitem__(self, k: Literal["href"]) -> str: ...
    @overload
    def __getitem__(self, k: Literal["items"]) -> List[_T]: ...
    @overload
    def __getitem__(self, k: Literal["limit"]) -> int: ...
    @overload
    def __getitem__(self, k: Literal["next"]) -> str: ...
    @overload
    def __getitem__(self, k: Literal["total"]) -> int: ...

    def __getitem__(self, k: str) -> Any: ...
    # autopep8: on


# autopep8: off
# TODO: Some of these List[T] are actually Page[T], it is not well-documented
# TODO: Some calls can return Episodes or Tracks, but right now they are only typed as returning Tracks
Album = TypedDict("Album", {"album_type": str, "artists": List["Artist"], "available_markets": List[str], "copyrights": List["Copyright"], "external_ids": "ExternalId", "external_urls": "ExternalUrl", "genres": List[str], "href": str, "id": str, "images": List["Image"], "label": str, "name": str, "popularity": int, "release_date": str, "release_date_precision": str, "restrictions": "AlbumRestriction", "total_tracks": int, "tracks": 'Page[SimplifiedTrack]', "type": str, "uri": str})
AlbumRestriction = TypedDict("AlbumRestriction", {"reason": str})
Artist = TypedDict("Artist", {"external_urls": "ExternalUrl", "followers": "Followers", "genres": List[str], "href": str, "id": str, "images": List["Image"], "name": str, "popularity": int, "type": str, "uri": str})
AudioFeatures = TypedDict("AudioFeatures", {"acousticness": float, "analysis_url": str, "danceability": float, "duration_ms": int, "energy": float, "id": str, "instrumentalness": float, "key": int, "liveness": float, "loudness": float, "mode": int, "speechiness": float, "tempo": float, "time_signature": int, "track_href": str, "type": str, "uri": str, "valence": float})
Category = TypedDict("Category", {"href": str, "icons": List["Image"], "id": str, "name": str})
Context = TypedDict("Context", {"external_urls": "ExternalUrl", "href": str, "type": str, "uri": str})
Copyright = TypedDict("Copyright", {"text": str, "type": str})
CurrentlyPlayingContext = TypedDict("CurrentlyPlayingContext", {"actions": "Disallows", "context": "Context", "currently_playing_type": str, "device": "Device", "is_playing": bool, "item": "Track", "progress_ms": int, "repeat_state": str, "shuffle_state": str, "timestamp": int})
CurrentlyPlaying = TypedDict("CurrentlyPlaying", {"context": "Context", "currently_playing_type": str, "is_playing": bool, "item": "Track", "progress_ms": int, "timestamp": int})
Cursor = TypedDict("Cursor", {"after": str, "before": str})
Device = TypedDict("Device", {"id": str, "is_active": bool, "is_private_session": bool, "is_restricted": bool, "name": str, "type": str, "volume_percent": int})
Devices = TypedDict("Devices", {"devices": List["Device"]})
Disallows = TypedDict("Disallows", {"interrupting_playback": bool, "pausing": bool, "resuming": bool, "seeking": bool, "skipping_next": bool, "skipping_prev": bool, "toggling_repeat_context": bool, "toggling_repeat_track": bool, "toggling_shuffle": bool, "transferring_playback": bool})
Episode = TypedDict("Episode", {"audio_preview_url": str, "description": str, "duration_ms": int, "explicit": bool, "external_urls": "ExternalUrl", "href": str, "html_description": str, "id": str, "images": List["Image"], "is_externally_hosted": bool, "is_playable": bool, "language": str, "languages": List[str], "name": str, "release_date": str, "release_date_precision": str, "restrictions": "EpisodeRestriction", "resume_point": "ResumePoint", "show": "SimplifiedShow", "type": str, "uri": str})
EpisodeRestriction = TypedDict("EpisodeRestriction", {"reason": str})
Error = TypedDict("Error", {"message": str, "status": int})
ExplicitContentSettings = TypedDict("ExplicitContentSettings", {"filter_enabled": bool, "filter_locked": bool})
ExternalId = TypedDict("ExternalId", {"ean": str, "isrc": str, "upc": str})
ExternalUrl = TypedDict("ExternalUrl", {"spotify": str})
Followers = TypedDict("Followers", {"href": str, "total": int})
Image = TypedDict("Image", {"height": int, "url": str, "width": int})
LinkedTrack = TypedDict("LinkedTrack", {"external_urls": "ExternalUrl", "href": str, "id": str, "type": str, "uri": str})
PlayHistory = TypedDict("PlayHistory", {"context": "Context", "played_at": str, "track": "SimplifiedTrack"})
PlayerError = TypedDict("PlayerError", {"message": str, "reason": str, "status": int})
Playlist = TypedDict("Playlist", {"collaborative": bool, "description": str, "external_urls": "ExternalUrl", "followers": "Followers", "href": str, "id": str, "images": List["Image"], "name": str, "owner": "PublicUser", "public": bool, "snapshot_id": str, "tracks": List["PlaylistTrack"], "type": str, "uri": str})
PlaylistTrack = TypedDict("PlaylistTrack", {"added_at": str, "added_by": "PublicUser", "is_local": bool, "track": "Track"})
PlaylistTracksRef = TypedDict("PlaylistTracksRef", {"href": str, "total": int})
PrivateUser = TypedDict("PrivateUser", {"country": str, "display_name": str, "email": str, "explicit_content": "ExplicitContentSettings", "external_urls": "ExternalUrl", "followers": "Followers", "href": str, "id": str, "images": List["Image"], "product": str, "type": str, "uri": str})
PublicUser = TypedDict("PublicUser", {"display_name": str, "external_urls": "ExternalUrl", "followers": "Followers", "href": str, "id": str, "images": List["Image"], "type": str, "uri": str})
RecommendationSeed = TypedDict("RecommendationSeed", {"afterFilteringSize": int, "afterRelinkingSize": int, "href": str, "id": str, "initialPoolSize": int, "type": str})
Recommendations = TypedDict("Recommendations", {"seeds": List["RecommendationSeed"], "tracks": List["SimplifiedTrack"]})
ResumePoint = TypedDict("ResumePoint", {"fully_played": bool, "resume_position_ms": int})
SavedAlbum = TypedDict("SavedAlbum", {"added_at": str, "album": "Album"})
SavedEpisode = TypedDict("SavedEpisode", {"added_at": str, "episode": "Episode"})
SavedShow = TypedDict("SavedShow", {"added_at": str, "show": "SimplifiedShow"})
SavedTrack = TypedDict("SavedTrack", {"added_at": str, "track": "Track"})
Show = TypedDict("Show", {"available_markets": List[str], "copyrights": List["Copyright"], "description": str, "episodes": List["SimplifiedEpisode"], "explicit": bool, "external_urls": "ExternalUrl", "href": str, "html_description": str, "id": str, "images": List["Image"], "is_externally_hosted": bool, "languages": List[str], "media_type": str, "name": str, "publisher": str, "type": str, "uri": str})
SimplifiedAlbum = TypedDict("SimplifiedAlbum", {"album_group": str, "album_type": str, "artists": List["SimplifiedArtist"], "available_markets": List[str], "external_urls": "ExternalUrl", "href": str, "id": str, "images": List["Image"], "name": str, "release_date": str, "release_date_precision": str, "restrictions": "AlbumRestriction", "total_tracks": int, "type": str, "uri": str})
SimplifiedArtist = TypedDict("SimplifiedArtist", {"external_urls": "ExternalUrl", "href": str, "id": str, "name": str, "type": str, "uri": str})
SimplifiedEpisode = TypedDict("SimplifiedEpisode", {"audio_preview_url": str, "description": str, "duration_ms": int, "explicit": bool, "external_urls": "ExternalUrl", "href": str, "html_description": str, "id": str, "images": List["Image"], "is_externally_hosted": bool, "is_playable": bool, "language": str, "languages": List[str], "name": str, "release_date": str, "release_date_precision": str, "restrictions": "EpisodeRestriction", "resume_point": "ResumePoint", "type": str, "uri": str})
SimplifiedPlaylist = TypedDict("SimplifiedPlaylist", {"collaborative": bool, "description": str, "external_urls": "ExternalUrl", "href": str, "id": str, "images": List["Image"], "name": str, "owner": "PublicUser", "public": bool, "snapshot_id": str, "tracks": "PlaylistTracksRef", "type": str, "uri": str})
SimplifiedShow = TypedDict("SimplifiedShow", {"available_markets": List[str], "copyrights": List["Copyright"], "description": str, "explicit": bool, "external_urls": "ExternalUrl", "href": str, "html_description": str, "id": str, "images": List["Image"], "is_externally_hosted": bool, "languages": List[str], "media_type": str, "name": str, "publisher": str, "type": str, "uri": str})
SimplifiedTrack = TypedDict("SimplifiedTrack", {"artists": List["SimplifiedArtist"], "available_markets": List[str], "disc_number": int, "duration_ms": int, "explicit": bool, "external_urls": "ExternalUrl", "href": str, "id": str, "is_local": bool, "is_playable": bool, "linked_from": "LinkedTrack", "name": str, "preview_url": str, "restrictions": "TrackRestriction", "track_number": int, "type": str, "uri": str})
Track = TypedDict("Track", {"album": "SimplifiedAlbum", "artists": List["Artist"], "available_markets": List[str], "disc_number": int, "duration_ms": int, "explicit": bool, "external_ids": "ExternalId", "external_urls": "ExternalUrl", "href": str, "id": str, "is_local": bool, "is_playable": bool, "linked_from": "LinkedTrack", "name": str, "popularity": int, "preview_url": str, "restrictions": "TrackRestriction", "track_number": int, "type": str, "uri": str})
TrackRestriction = TypedDict("TrackRestriction", {"reason": str})
TuneableTrack = TypedDict("TuneableTrack", {"acousticness": float, "danceability": float, "duration_ms": int, "energy": float, "instrumentalness": float, "key": int, "liveness": float, "loudness": float, "mode": int, "popularity": float, "speechiness": float, "tempo": float, "time_signature": int, "valence": float})
