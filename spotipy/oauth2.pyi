from six.moves.BaseHTTPServer import BaseHTTPRequestHandler
from typing import Any, Optional

class SpotifyOauthError(Exception):
    error: Any = ...
    error_description: Any = ...
    def __init__(self, message: Any, error: Optional[Any] = ..., error_description: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...

class SpotifyStateError(SpotifyOauthError):
    def __init__(self, local_state: Optional[Any] = ..., remote_state: Optional[Any] = ..., message: Optional[Any] = ..., error: Optional[Any] = ..., error_description: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...

class SpotifyAuthBase:
    def __init__(self, requests_session: Any) -> None: ...
    @property
    def client_id(self): ...
    @client_id.setter
    def client_id(self, val: Any) -> None: ...
    @property
    def client_secret(self): ...
    @client_secret.setter
    def client_secret(self, val: Any) -> None: ...
    @property
    def redirect_uri(self): ...
    @redirect_uri.setter
    def redirect_uri(self, val: Any) -> None: ...
    @staticmethod
    def is_token_expired(token_info: Any): ...
    def __del__(self) -> None: ...

class SpotifyClientCredentials(SpotifyAuthBase):
    OAUTH_TOKEN_URL: str = ...
    client_id: Any = ...
    client_secret: Any = ...
    proxies: Any = ...
    requests_timeout: Any = ...
    cache_handler: Any = ...
    def __init__(self, client_id: Optional[Any] = ..., client_secret: Optional[Any] = ..., proxies: Optional[Any] = ..., requests_session: bool = ..., requests_timeout: Optional[Any] = ..., cache_handler: Optional[Any] = ...) -> None: ...
    def get_access_token(self, as_dict: bool = ..., check_cache: bool = ...): ...

class SpotifyOAuth(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str = ...
    OAUTH_TOKEN_URL: str = ...
    client_id: Any = ...
    client_secret: Any = ...
    redirect_uri: Any = ...
    state: Any = ...
    scope: Any = ...
    cache_handler: Any = ...
    proxies: Any = ...
    requests_timeout: Any = ...
    show_dialog: Any = ...
    open_browser: Any = ...
    def __init__(self, client_id: Optional[Any] = ..., client_secret: Optional[Any] = ..., redirect_uri: Optional[Any] = ..., state: Optional[Any] = ..., scope: Optional[Any] = ..., cache_path: Optional[Any] = ..., username: Optional[Any] = ..., proxies: Optional[Any] = ..., show_dialog: bool = ..., requests_session: bool = ..., requests_timeout: Optional[Any] = ..., open_browser: bool = ..., cache_handler: Optional[Any] = ...) -> None: ...
    def validate_token(self, token_info: Any): ...
    def get_authorize_url(self, state: Optional[Any] = ...): ...
    def parse_response_code(self, url: Any): ...
    @staticmethod
    def parse_auth_response_url(url: Any): ...
    def get_auth_response(self, open_browser: Optional[Any] = ...): ...
    def get_authorization_code(self, response: Optional[Any] = ...): ...
    def get_access_token(self, code: Optional[Any] = ..., as_dict: bool = ..., check_cache: bool = ...): ...
    def refresh_access_token(self, refresh_token: Any): ...
    def get_cached_token(self): ...

class SpotifyPKCE(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str = ...
    OAUTH_TOKEN_URL: str = ...
    client_id: Any = ...
    redirect_uri: Any = ...
    state: Any = ...
    scope: Any = ...
    cache_handler: Any = ...
    proxies: Any = ...
    requests_timeout: Any = ...
    code_verifier: Any = ...
    code_challenge: Any = ...
    authorization_code: Any = ...
    open_browser: Any = ...
    def __init__(self, client_id: Optional[Any] = ..., redirect_uri: Optional[Any] = ..., state: Optional[Any] = ..., scope: Optional[Any] = ..., cache_path: Optional[Any] = ..., username: Optional[Any] = ..., proxies: Optional[Any] = ..., requests_timeout: Optional[Any] = ..., requests_session: bool = ..., open_browser: bool = ..., cache_handler: Optional[Any] = ...) -> None: ...
    def get_authorize_url(self, state: Optional[Any] = ...): ...
    def get_authorization_code(self, response: Optional[Any] = ...): ...
    def validate_token(self, token_info: Any): ...
    def get_pkce_handshake_parameters(self) -> None: ...
    def get_access_token(self, code: Optional[Any] = ..., check_cache: bool = ...): ...
    def refresh_access_token(self, refresh_token: Any): ...
    def parse_response_code(self, url: Any): ...
    @staticmethod
    def parse_auth_response_url(url: Any): ...
    def get_cached_token(self): ...

class SpotifyImplicitGrant(SpotifyAuthBase):
    OAUTH_AUTHORIZE_URL: str = ...
    client_id: Any = ...
    redirect_uri: Any = ...
    state: Any = ...
    cache_handler: Any = ...
    scope: Any = ...
    show_dialog: Any = ...
    def __init__(self, client_id: Optional[Any] = ..., redirect_uri: Optional[Any] = ..., state: Optional[Any] = ..., scope: Optional[Any] = ..., cache_path: Optional[Any] = ..., username: Optional[Any] = ..., show_dialog: bool = ..., cache_handler: Optional[Any] = ...) -> None: ...
    def validate_token(self, token_info: Any): ...
    def get_access_token(self, state: Optional[Any] = ..., response: Optional[Any] = ..., check_cache: bool = ...): ...
    def get_authorize_url(self, state: Optional[Any] = ...): ...
    def parse_response_token(self, url: Any, state: Optional[Any] = ...): ...
    @staticmethod
    def parse_auth_response_url(url: Any): ...
    def get_auth_response(self, state: Optional[Any] = ...): ...
    def get_cached_token(self): ...

class RequestHandler(BaseHTTPRequestHandler):
    def do_GET(self) -> None: ...
    def log_message(self, format: Any, *args: Any) -> None: ...
